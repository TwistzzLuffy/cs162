8c8
<  * Copyright © 2019 University of California, Berkeley
---
>  * Copyright © 2021 University of California, Berkeley
26d25
< 
29,30c28,29
< void init_words(word_count_list_t *wclist) {
<   /* TODO */
---
> void init_words(word_count_list_t* wclist) {
>    /* TODO */
34c33
< size_t len_words(word_count_list_t *wclist) {
---
> size_t len_words(word_count_list_t* wclist) {
36c35
<   size_t len = 0;
---
>   int len = 0;
38,41c37,39
<   for (e = list_begin(wclist); e != list_end(wclist); e = list_next(e)) {
<     len += 1;
<   }
< 
---
>   for(e = list_begin(wclist); e != list_end(wclist); e = list_next(e)){
>     len++;
>   } 
45c43
< word_count_t *find_word(word_count_list_t *wclist, char *word) {
---
> word_count_t* find_word(word_count_list_t* wclist, char* word) {
48,51c46,49
<   for (e = list_begin(wclist); e != list_end(wclist); e = list_next(e)) {
<     struct word_count *wc = list_entry(e, struct word_count, elem);    // HAVE TO CONSIDER
<     if (strcmp(word, wc->word) == 0) {
<       return wc;
---
>   for(e = list_begin(wclist); e != list_end(wclist); e = list_next(e)){
>     word_count_t* w = list_entry(e, struct word_count, elem);
>     if(strcmp(w->word, *word) == 0){
>       return w;
57,58c55
< word_count_t *add_word_with_count(word_count_list_t *wclist, char *word,
<                                   int count) {
---
> word_count_t* add_word(word_count_list_t* wclist, char* word) {
60,69c57,67
<   word_count_t *wc = find_word(wclist, word);
<   if (wc != NULL) {
<     wc->count += 1;
<   } else if ((wc = malloc(sizeof(word_count_t))) != NULL) {
<     wc->word = word;
<     wc->count = 1;
<     
<     struct list_elem *e = list_begin(wclist);
<     while (--count) {
<       e = list_next(e);
---
>   word_count_t *w = find_word(wclist, word);
>   if( w != NULL){
>     //we need to add new point in front
>     w->count++;
>   }else{
>     if(w = malloc(sizeof(word_count_t)) != NULL){
>       w->word = word;
>       w->count = 1;
>       
>       struct list_elem *e = list_begin(wclist);
>       list_insert(e, &w->elem);
71d68
<     list_insert(e, &wc->elem);
73,78c70
< 
<   return wc;
< }
< 
< word_count_t *add_word(word_count_list_t *wclist, char *word) {
<   return add_word_with_count(wclist, word, 1);
---
>   return w;
81,87c73,78
< void fprint_words(word_count_list_t *wclist, FILE *outfile) {
<   /* TODO */
<   struct list_elem *e;
<   for (e = list_begin(wclist); e != list_end(wclist); e = list_next(e)) {
<     struct word_count *wc = list_entry(e, struct word_count, elem);    // HAVE TO CONSIDER
<     fprintf(outfile, "%8d\t%s\n", wc->count, wc->word);
<   }
---
> void fprint_words(word_count_list_t* wclist, FILE* outfile) { /* TODO */
>     struct list_elem *e;
>     for(e = list_begin(wclist); e != list_end(wclist); e = list_next(e)){
>       word_count_t *w = list_entry(e, struct word_count, elem);
>       fprintf(outfile, "%s\t %d\n", w->word, w->count);
>     }
90,91c81
< static bool less_list(const struct list_elem *ewc1,
<                       const struct list_elem *ewc2, void *aux) {
---
> static bool less_list(const struct list_elem* ewc1, const struct list_elem* ewc2, void* aux) {
93,95c83,85
<   bool (*less)(const word_count_t *, const word_count_t *) = aux;
<   struct word_count *wc1 = list_entry(ewc1, struct word_count, elem);
<   struct word_count *wc2 = list_entry(ewc2, struct word_count, elem);
---
>   bool (*less)(const word_count_t*, const word_count_t*) = aux;
>   word_count_t *w1 = list_entry(ewc1, struct word_count, elem);
>   word_count_t *w2 = list_entry(ewc2, struct word_count, elem);
97c87
<   return less(wc1, wc2);
---
>   return less(w1, w2);
100,101c90,91
< void wordcount_sort(word_count_list_t *wclist,
<                     bool less(const word_count_t *, const word_count_t *)) {
---
> void wordcount_sort(word_count_list_t* wclist,
>                     bool less(const word_count_t*, const word_count_t*)) {
103c93
< }
\ No newline at end of file
---
> }
